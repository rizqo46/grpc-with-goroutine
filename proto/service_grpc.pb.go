// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	GetAllFriends(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (Server_GetAllFriendsClient, error)
	GetUsersByDate(ctx context.Context, in *DateQuery, opts ...grpc.CallOption) (Server_GetUsersByDateClient, error)
	SendEmailToAllFriends(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*SendEmails, error)
	GetEmailLogsBySenderId(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (Server_GetEmailLogsBySenderIdClient, error)
	GetEmailLogsByDate(ctx context.Context, in *DateQuery, opts ...grpc.CallOption) (Server_GetEmailLogsByDateClient, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) GetAllFriends(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (Server_GetAllFriendsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[0], "/proto.Server/GetAllFriends", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverGetAllFriendsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Server_GetAllFriendsClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type serverGetAllFriendsClient struct {
	grpc.ClientStream
}

func (x *serverGetAllFriendsClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) GetUsersByDate(ctx context.Context, in *DateQuery, opts ...grpc.CallOption) (Server_GetUsersByDateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[1], "/proto.Server/GetUsersByDate", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverGetUsersByDateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Server_GetUsersByDateClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type serverGetUsersByDateClient struct {
	grpc.ClientStream
}

func (x *serverGetUsersByDateClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) SendEmailToAllFriends(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*SendEmails, error) {
	out := new(SendEmails)
	err := c.cc.Invoke(ctx, "/proto.Server/SendEmailToAllFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetEmailLogsBySenderId(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (Server_GetEmailLogsBySenderIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[2], "/proto.Server/GetEmailLogsBySenderId", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverGetEmailLogsBySenderIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Server_GetEmailLogsBySenderIdClient interface {
	Recv() (*EmailLog, error)
	grpc.ClientStream
}

type serverGetEmailLogsBySenderIdClient struct {
	grpc.ClientStream
}

func (x *serverGetEmailLogsBySenderIdClient) Recv() (*EmailLog, error) {
	m := new(EmailLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) GetEmailLogsByDate(ctx context.Context, in *DateQuery, opts ...grpc.CallOption) (Server_GetEmailLogsByDateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[3], "/proto.Server/GetEmailLogsByDate", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverGetEmailLogsByDateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Server_GetEmailLogsByDateClient interface {
	Recv() (*EmailLog, error)
	grpc.ClientStream
}

type serverGetEmailLogsByDateClient struct {
	grpc.ClientStream
}

func (x *serverGetEmailLogsByDateClient) Recv() (*EmailLog, error) {
	m := new(EmailLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	GetAllFriends(*UserQuery, Server_GetAllFriendsServer) error
	GetUsersByDate(*DateQuery, Server_GetUsersByDateServer) error
	SendEmailToAllFriends(context.Context, *UserQuery) (*SendEmails, error)
	GetEmailLogsBySenderId(*UserQuery, Server_GetEmailLogsBySenderIdServer) error
	GetEmailLogsByDate(*DateQuery, Server_GetEmailLogsByDateServer) error
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) GetAllFriends(*UserQuery, Server_GetAllFriendsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllFriends not implemented")
}
func (UnimplementedServerServer) GetUsersByDate(*DateQuery, Server_GetUsersByDateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsersByDate not implemented")
}
func (UnimplementedServerServer) SendEmailToAllFriends(context.Context, *UserQuery) (*SendEmails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailToAllFriends not implemented")
}
func (UnimplementedServerServer) GetEmailLogsBySenderId(*UserQuery, Server_GetEmailLogsBySenderIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEmailLogsBySenderId not implemented")
}
func (UnimplementedServerServer) GetEmailLogsByDate(*DateQuery, Server_GetEmailLogsByDateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEmailLogsByDate not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_GetAllFriends_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).GetAllFriends(m, &serverGetAllFriendsServer{stream})
}

type Server_GetAllFriendsServer interface {
	Send(*User) error
	grpc.ServerStream
}

type serverGetAllFriendsServer struct {
	grpc.ServerStream
}

func (x *serverGetAllFriendsServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _Server_GetUsersByDate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DateQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).GetUsersByDate(m, &serverGetUsersByDateServer{stream})
}

type Server_GetUsersByDateServer interface {
	Send(*User) error
	grpc.ServerStream
}

type serverGetUsersByDateServer struct {
	grpc.ServerStream
}

func (x *serverGetUsersByDateServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _Server_SendEmailToAllFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SendEmailToAllFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Server/SendEmailToAllFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SendEmailToAllFriends(ctx, req.(*UserQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetEmailLogsBySenderId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).GetEmailLogsBySenderId(m, &serverGetEmailLogsBySenderIdServer{stream})
}

type Server_GetEmailLogsBySenderIdServer interface {
	Send(*EmailLog) error
	grpc.ServerStream
}

type serverGetEmailLogsBySenderIdServer struct {
	grpc.ServerStream
}

func (x *serverGetEmailLogsBySenderIdServer) Send(m *EmailLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Server_GetEmailLogsByDate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DateQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).GetEmailLogsByDate(m, &serverGetEmailLogsByDateServer{stream})
}

type Server_GetEmailLogsByDateServer interface {
	Send(*EmailLog) error
	grpc.ServerStream
}

type serverGetEmailLogsByDateServer struct {
	grpc.ServerStream
}

func (x *serverGetEmailLogsByDateServer) Send(m *EmailLog) error {
	return x.ServerStream.SendMsg(m)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmailToAllFriends",
			Handler:    _Server_SendEmailToAllFriends_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllFriends",
			Handler:       _Server_GetAllFriends_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUsersByDate",
			Handler:       _Server_GetUsersByDate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEmailLogsBySenderId",
			Handler:       _Server_GetEmailLogsBySenderId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEmailLogsByDate",
			Handler:       _Server_GetEmailLogsByDate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
